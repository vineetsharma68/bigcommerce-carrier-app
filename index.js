require("dotenv").config();
const express = require("express");
const bodyParser = require("body-parser");
const axios = require("axios");

const app = express();
app.use(bodyParser.json());

// --- CONSTANTS ---
const API_BASE_URL = "https://api.bigcommerce.com/stores";
const MY_CARRIER_ID = "myrover_carrier"; // рдЖрдкрдХреЗ рдореЗрдЯрд╛рдбреЗрдЯрд╛ рдХреЗ рд╕рд╛рде рдореЗрд▓ рдЦрд╛рдирд╛ рдЪрд╛рд╣рд┐рдП
const MY_RATE_URL = `${process.env.APP_URL}/api/rates`; 
const MY_DISPLAY_NAME = "MyRover Shipping";


// ----------------------------------------------------------------------
// CARRIER MANAGEMENT HELPER FUNCTION
// ----------------------------------------------------------------------

/**
 * Checks for and registers/updates the Carrier Object in BigCommerce.
 */
async function manageBcCarrierConnection(storeHash, accessToken) {
    
    // Placeholder function: API calls require these headers
    const headers = {
        "Content-Type": "application/json",
        "Accept": "application/json",
        "X-Auth-Token": accessToken, 
    };
    
    const apiEndpoint = `${API_BASE_URL}/${storeHash}/v2/shipping/carrier/connections`;

    // 1. GET: рдореМрдЬреВрджрд╛ рдХрдиреЗрдХреНрд╢рдиреЛрдВ рдХреА рдЬрд╛рдБрдЪ рдХрд░реЗрдВ
    try {
        const checkResponse = await axios.get(apiEndpoint, { headers });
        const existingConnections = checkResponse.data;

        let existingBcId = null;
        for (const carrier of existingConnections) {
            if (carrier.carrier_id === MY_CARRIER_ID) {
                existingBcId = carrier.id;
                break;
            }
        }

        const carrierPayload = {
            carrier_id: MY_CARRIER_ID,
            display_name: MY_DISPLAY_NAME,
            type: "rate_calculator",
            rate_url: MY_RATE_URL, 
            // validation_url: `${process.env.APP_URL}/api/validate`, // рдЕрдЧрд░ рдЖрдк Validation Endpoint рдЬреЛрдбрд╝рддреЗ рд╣реИрдВ
        };

        if (existingBcId) {
            // 2. PUT: рдЕрдЧрд░ рдХрдиреЗрдХреНрд╢рди рдорд┐рд▓ рдЧрдпрд╛, рддреЛ рдЕрдкрдбреЗрдЯ рдХрд░реЗрдВ
            await axios.put(`${apiEndpoint}/${existingBcId}`, carrierPayload, { headers });
            console.log(`тЬЕ Carrier ID ${existingBcId} updated (PUT).`);
            
        } else {
            // 3. POST: рдЕрдЧрд░ рдХрдиреЗрдХреНрд╢рди рдирд╣реАрдВ рдорд┐рд▓рд╛, рддреЛ рдирдпрд╛ рдмрдирд╛рдПрдБ
            const createResponse = await axios.post(apiEndpoint, carrierPayload, { headers });
            console.log(`тЬЕ New Carrier connection created (POST): ID ${createResponse.data.id}`);
        }
    } catch (error) {
        // рдпрд╣рд╛рдБ error рдХреЛ throw рдХрд░рдирд╛ рдорд╣рддреНрд╡рдкреВрд░реНрдг рд╣реИ рддрд╛рдХрд┐ App installation fail рд╣реЛ рдЬрд╛рдП рдпрджрд┐ Carrier setup fail рд╣реЛрддрд╛ рд╣реИ
        console.error("тЭМ Carrier Connection Management Failed:", error.response?.data || error.message);
        throw new Error("BigCommerce Carrier setup failed during installation.");
    }
}

/**
 * Placeholder for saving credentials to your database (DB).
 * NOTE: You MUST implement this function to store tokens securely.
 */
async function saveStoreCredentialsToDB(storeHash, accessToken) {
    // Implement your database logic here (e.g., using Mongoose/Sequelize)
    console.log(`ЁЯФТ Credentials saved for store: ${storeHash}`);
    // Example: await db.collection('stores').updateOne({ hash: storeHash }, { $set: { token: accessToken } }, { upsert: true });
}

// ----------------------------------------------------------------------
// EXPRESS ROUTES
// ----------------------------------------------------------------------

// тЬЕ 1я╕ПтГг Home route
app.get("/", (req, res) => {
┬а res.send("ЁЯЪА MyRover Carrier App is running successfully!");
});



// тЬЕ 2я╕ПтГг OAuth Step 1 - BigCommerce authorization
app.get("/api/auth", async (req, res) => {
  console.log("тЬЕ OAuth Step 1 triggered", req.query);

  const { context } = req.query;
  if (!context) return res.status(400).send("тЭМ Missing store context");

  const redirectUri = `${process.env.APP_URL}/api/auth/callback`;

  // Redirect to BigCommerce OAuth login
  const installUrl = `https://login.bigcommerce.com/oauth2/authorize?client_id=${process.env.CLIENT_ID}&scope=${encodeURIComponent("store_v2_orders store_v2_information store_v2_shipping")}&redirect_uri=${encodeURIComponent(
    redirectUri
  )}&response_type=code&context=${context}`;

  res.redirect(installUrl);
});


// тЬЕ 3я╕ПтГг OAuth Step 2 - Callback from BigCommerce
app.get("/api/auth/callback", async (req, res) => {
  console.log("тЬЕ OAuth Callback triggered:", req.query);

  const { code, scope, context } = req.query;
  if (!code) return res.status(400).send("тЭМ Missing OAuth code");

  try {
    const tokenResponse = await axios.post("https://login.bigcommerce.com/oauth2/token", {
      client_id: process.env.CLIENT_ID,
      client_secret: process.env.CLIENT_SECRET,
      redirect_uri: `${process.env.APP_URL}/api/auth/callback`,
      grant_type: "authorization_code",
      code,
      scope,
      context,
    });

    console.log("тЬЕ OAuth Token Received:", tokenResponse.data);
    res.send("тЬЕ App installed successfully! You can close this window now.");
  } catch (err) {
    console.error("тЭМ OAuth Error:", err.response?.data || err.message);
    res.status(500).send("OAuth failed");
  }
});

// тЬЕ 4я╕ПтГг Uninstall callback
app.post("/api/uninstall", (req, res) => {
┬а console.log("тЭМ App Uninstalled:", req.body);
    // TODO: рдпрд╣рд╛рдВ рдбреЗрдЯрд╛рдмреЗрд╕ рд╕реЗ рд╕реНрдЯреЛрд░ рдХреНрд░реЗрдбреЗрдВрд╢рд┐рдпрд▓реНрд╕ рд╣рдЯрд╛рдПрдБ!
┬а res.send("тЬЕ Uninstall cleanup done.");
});


// тЬЕ 5я╕ПтГг Fetch available MyRover services
app.get("/api/myrover/services", async (req, res) => {
┬а try {
┬а ┬а const response = await axios.post("https://apis.myrover.io/GetServices", {}, {
┬а ┬а ┬а headers: {
┬а ┬а ┬а ┬а Authorization: process.env.MYROVER_API_KEY,
┬а ┬а ┬а ┬а "Content-Type": "application/json",
┬а ┬а ┬а },
┬а ┬а });

┬а ┬а console.log("ЁЯУж MyRover Services:", response.data);
┬а ┬а res.json({
┬а ┬а ┬а success: true,
┬а ┬а ┬а message: "Fetched available services from MyRover",
┬а ┬а ┬а data: response.data,
┬а ┬а });
┬а } catch (err) {
┬а ┬а console.error("тЭМ Error fetching MyRover services:", err.response?.data || err.message);
┬а ┬а res.status(500).json({
┬а ┬а ┬а success: false,
┬а ┬а ┬а error: err.response?.data || err.message,
┬а ┬а });
┬а }
});


// тЬЕ 6я╕ПтГг Shipping Rates endpoint (BigCommerce calls this URL)
app.post("/api/rates", async (req, res) => {
┬а const { origin, destination, items } = req.body;
┬а console.log("ЁЯУж Rate request received:", { origin, destination, items });

    // NOTE: рдЖрдкрдХреЛ рдпрд╣рд╛рдВ BigCommerce рд╕реЗ storeHash рдкреНрд░рд╛рдкреНрдд рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдПрдХ рддрд░реАрдХрд╛ рд▓рд╛рдЧреВ рдХрд░рдирд╛ рд╣реЛрдЧрд╛
    // рддрд╛рдХрд┐ рдЖрдк рдЙрд╕ рд╕реНрдЯреЛрд░ рдХреЗ рд▓рд┐рдП database рд╕реЗ access_token рд▓рд╛ рд╕рдХреЗрдВред
    // рд╕реБрд░рдХреНрд╖рд╛ рдХрд╛рд░рдгреЛрдВ рд╕реЗ, BigCommerce rates call рдореЗрдВ storeHash рдирд╣реАрдВ рднреЗрдЬрддрд╛ рд╣реИред
    
┬а try {
┬а ┬а // Fetch MyRover services dynamically (to get service IDs)
┬а ┬а const serviceRes = await axios.post("https://apis.myrover.io/GetServices", {}, {
┬а ┬а ┬а headers: {
┬а ┬а ┬а ┬а Authorization: process.env.MYROVER_API_KEY,
┬а ┬а ┬а ┬а "Content-Type": "application/json",
┬а ┬а ┬а },
┬а ┬а });

┬а ┬а const services = serviceRes.data?.services || [];
┬а ┬а console.log(`тЬЕ Found ${services.length} MyRover services`);

┬а ┬а // Test only first available service for demo (you can extend this)
┬а ┬а const service = services[0];
┬а ┬а console.log("ЁЯзй Using service:", service);

┬а ┬а // Fake pickup/drop addresses for test тАФ later map them dynamically
┬а ┬а const pickupAddress = "100 Dundas St W, Toronto, ON";
┬а ┬а const dropAddress = "200 King St W, Toronto, ON";

┬а ┬а // MyRover GetPrice API call
┬а ┬а const priceRes = await axios.post(
┬а ┬а ┬а "https://apis.myrover.io/GetPrice",
┬а ┬а ┬а {
┬а ┬а ┬а ┬а service_id: service.id,
┬а ┬а ┬а ┬а priority_id: 1,
┬а ┬а ┬а ┬а pickup_address: pickupAddress,
┬а ┬а ┬а ┬а drop_address: dropAddress,
┬а ┬а ┬а },
┬а ┬а ┬а {
┬а ┬а ┬а ┬а headers: {
┬а ┬а ┬а ┬а ┬а Authorization: process.env.MYROVER_API_KEY,
┬а ┬а ┬а ┬а ┬а "Content-Type": "application/json",
┬а ┬а ┬а ┬а },
┬а ┬а ┬а }
┬а ┬а );

┬а ┬а console.log("ЁЯТ░ MyRover Price Response:", priceRes.data);

┬а ┬а const cost = priceRes.data?.data?.cost || 15.0;

┬а ┬а const rates = [
┬а ┬а ┬а {
┬а ┬а ┬а ┬а carrier_quote: {
┬а ┬а ┬а ┬а ┬а code: service.abbreviation || "myrover",
┬а ┬а ┬а ┬а ┬а display_name: service.name || "MyRover Shipping",
┬а ┬а ┬а ┬а ┬а cost: cost,
┬а ┬а ┬а ┬а },
┬а ┬а ┬а },
┬а ┬а ];

    // BigCommerce рдХреЛ rates рд▓реМрдЯрд╛рдПрдБ
┬а ┬а res.json({ data: rates });
┬а } catch (err) {
┬а ┬а console.error("тЭМ MyRover API error:", err.response?.data || err.message);

┬а ┬а // fallback dummy rates
┬а ┬а res.json({
┬а ┬а ┬а data: [
┬а ┬а ┬а ┬а { carrier_quote: { code: "standard", display_name: "Standard Shipping", cost: 10.5 } },
┬а ┬а ┬а ┬а { carrier_quote: { code: "express", display_name: "Express Shipping", cost: 25.0 } },
┬а ┬а ┬а ],
┬а ┬а });
┬а }
});

// Test MyRover API key
app.get("/api/test-myrover", async (req, res) => {
┬а try {
┬а ┬а const response = await axios.post(
┬а ┬а ┬а "https://apis.myrover.io/GetServices",
┬а ┬а ┬а {},
┬а ┬а ┬а {
┬а ┬а ┬а ┬а headers: {
┬а ┬а ┬а ┬а ┬а Authorization: process.env.MYROVER_API_KEY,
┬а ┬а ┬а ┬а ┬а "Content-Type": "application/json"
┬а ┬а ┬а ┬а }
┬а ┬а ┬а }
┬а ┬а );

┬а ┬а res.json({ success: true, data: response.data });
┬а } catch (err) {
┬а ┬а console.error("тЭМ MyRover.io GetServices error:", err.response?.data || err.message);
┬а ┬а res.status(401).json({ success: false, error: err.response?.data || err.message });
┬а }
});


// Load Callback (рдХреЗрд╡рд▓ App iframe рд▓реЛрдб рд╣реЛрдиреЗ рдкрд░)
/*app.get("/api/load", (req, res) => {
┬а console.log("тЬЕ /api/load HIT");
    // рдпрд╣рд╛рдВ рдЖрдкрдХрд╛ App UI/Settings рдкреЗрдЬ рд░реЗрдВрдбрд░ рд╣реЛрдирд╛ рдЪрд╛рд╣рд┐рдП, JSON рдирд╣реАрдВред
    // рдпрд╣ endpoint рд╕реАрдзреЗ BigCommerce App iframe рдореЗрдВ рд▓реЛрдб рд╣реЛрддрд╛ рд╣реИред
    res.send("<h1>Welcome to MyRover Settings</h1><p>Carrier configured successfully!</p>");
});*/

const crypto = require('crypto');

// ЁЯФС рд╕рд╣рд╛рдпрдХ рдлрд╝рдВрдХреНрд╢рди: BigCommerce signed_payload рдХреЛ рд╡реЗрд░рд┐рдлрд╛рдИ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП
// рдпрд╣ рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░рддрд╛ рд╣реИ рдХрд┐ рдЕрдиреБрд░реЛрдз (request) BigCommerce рд╕реЗ рдЖрдпрд╛ рд╣реИред
function verifySignedRequest(signedPayload, clientSecret) {
    if (!signedPayload || !clientSecret) return false;

    const parts = signedPayload.split('.');
    if (parts.length !== 2) return false;

    // ЁЯФС BigCommerce рдХреЗ Base64URL рдХреЛ рдорд╛рдирдХ Base64 рдореЗрдВ рдмрджрд▓реЗрдВ (URL Safe)
    const urlSafeData = parts[1].replace(/-/g, '+').replace(/_/g, '/');
    const urlSafeSignature = parts[0].replace(/-/g, '+').replace(/_/g, '/');

    const signature = Buffer.from(urlSafeSignature, 'base64').toString('hex');
    const data = Buffer.from(urlSafeData, 'base64').toString('utf8'); // рдбреЗрдЯрд╛ рдХреЛ utf8 рдХреЗ рд░реВрдк рдореЗрдВ рдбрд┐рдХреЛрдб рдХрд░реЗрдВ

    // рдЕрдкреЗрдХреНрд╖рд┐рдд рд╣рд╕реНрддрд╛рдХреНрд╖рд░ (Expected Signature) рдХреА рдЧрдгрдирд╛
    const expectedSignature = crypto
        .createHmac('sha256', clientSecret)
        .update(parts[1]) // рдореВрд▓, рдЕрд╕рдВрд╢реЛрдзрд┐рдд рдбреЗрдЯрд╛ рднрд╛рдЧ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ
        .digest('hex');
        
    // рдПрдХ рдФрд░ рджреБрд░реНрд▓рдн рд╕рдорд╕реНрдпрд╛: рдХреБрдЫ рдХрд╛рд░реНрдпрд╛рдиреНрд╡рдпрди рдкреВрд░реЗ 'рднрд╛рдЧреЛрдВ' рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рддреЗ рд╣реИрдВ
    // .update(parts[1]) рдХреЗ рдмрдЬрд╛рдп .update(parts[0] + '.' + parts[1]) рдХрд╛ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВ рдпрджрд┐ рдЙрдкрд░реНрдпреБрдХреНрдд рд╡рд┐рдлрд▓ рд╣реЛ

    // ЁЯФС рд▓реЙрдЧ рдореЗрдВ рджреЛрдиреЛрдВ Signature рджреЗрдЦреЗрдВ
    console.log(`DEBUG: Actual Signature (Hmac): ${expectedSignature}`);
    console.log(`DEBUG: Incoming Signature: ${signature}`);


    return expectedSignature === signature;
}

// -------------------------------------------------------------
// тЬЕ Load Callback (рдЬрдм рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ App Launch рдкрд░ рдХреНрд▓рд┐рдХ рдХрд░рддрд╛ рд╣реИ)
// -------------------------------------------------------------
// ... (crypto рдФрд░ verifySignedRequest рдлрд╝рдВрдХреНрд╢рди рдХреЛ рдЕрдкрд░рд┐рд╡рд░реНрддрд┐рдд рд░рдЦреЗрдВ)

app.get("/api/load", (req, res) => {
    console.log("тЬЕ /api/load HIT");

    const signedPayload = req.query.signed_payload;
    const clientSecret = process.env.CLIENT_SECRET;

    // ЁЯФС DEBUGGING STEP 1: Secret рдФрд░ Payload рдХреА рд▓рдВрдмрд╛рдИ рдЬрд╛рдБрдЪреЗрдВ
    console.log(`DEBUG: Client Secret Length: ${clientSecret ? clientSecret.length : 'NULL'}`);
    console.log(`DEBUG: Signed Payload Length: ${signedPayload ? signedPayload.length : 'NULL'}`);
    
    // рдпрд╣ рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдХрд┐ рдХреЛрдИ рдЫрд┐рдкрд╛ рд╣реБрдЖ рд╕реНрдкреЗрд╕ рдирд╣реАрдВ рд╣реИ
    const trimmedSecret = clientSecret ? clientSecret.trim() : null;
    console.log(`DEBUG: Trimmed Secret Length: ${trimmedSecret ? trimmedSecret.length : 'NULL'}`);


    if (!signedPayload) {
        return res.status(400).send("Bad Request: Missing signed_payload parameter.");
    }
    
    // ЁЯФС Trimmed Secret рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдХреЗ рд╡реЗрд░рд┐рдлрд┐рдХреЗрд╢рди рдХрд╛ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВ
    if (!verifySignedRequest(signedPayload, trimmedSecret)) {
        console.error("тЭМ Load Error: Invalid signed_payload signature!");
        // тЭМ рдпрджрд┐ рдпрд╣ рдпрд╣рд╛рдВ рдлреЗрд▓ рд╣реЛрддрд╛ рд╣реИ, рддреЛ 99.9% CLIENT_SECRET рдЧрд▓рдд рд╣реИред
        return res.status(401).send("Unauthorized: Invalid request signature.");
    }

    console.log("тЬЕ Load Verification Successful. Sending success HTML.");

    // ... (HTML response code рдЬрд╛рд░реА рд░рдЦреЗрдВ)
});

// тЬЕ 7я╕ПтГг Account verification (used by BigCommerce to check status)
/*app.post("/api/check", (req, res) => {
┬а console.log("тЬЕ /api/check HIT");
┬а return res.status(200).json({ status: "active" });
});*/
app.post("/api/check", (req, res) => {
┬а console.log("тЬЕ /api/check HIT: Sending simple status: active");
  
  // ЁЯФС 200 OK рд╕реНрдЯреЗрдЯрд╕ рдФрд░ рд╕рд░рд▓ JSON
┬а return res.status(200).json({ 
┬а   "status": "active",
    "messages": [] // рдХрднреА-рдХрднреА рдПрдХ рдЦрд╛рд▓реА messages array рдХреА рдЖрд╡рд╢реНрдпрдХрддрд╛ рд╣реЛрддреА рд╣реИ 
┬а });
});


// тЬЕ 8я╕ПтГг Metadata endpoint (BigCommerce checks available countries/services)
// рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░реЗрдВ рдХрд┐ рдпрд╣ рдХреЛрдб рдЖрдкрдХреЗ index.js рдореЗрдВ рдореМрдЬреВрдж рд╣реИ рдФрд░ рд╕рд╣реА рд╣реИ
app.get("/api/metadata", (req, res) => {
┬а console.log("тЬЕ /api/metadata HIT");
┬а 
┬а const base_url = process.env.APP_URL; 

┬а res.status(200).json({
┬а ┬а carriers: [
┬а ┬а ┬а {
┬а ┬а ┬а ┬а carrier_id: "myrover",
┬а ┬а ┬а ┬а label: "MyRover Shipping",
┬а ┬а ┬а ┬а countries: ["CA"], 
┬а ┬а ┬а ┬а settings_url: `${base_url}/api/check`, // рдпрд╛ рдЬреЛ рднреА рдЖрдк рдЙрдкрдпреЛрдЧ рдХрд░ рд░рд╣реЗ рд╣реИрдВ
┬а ┬а ┬а ┬а rates_url: `${base_url}/api/rates`, 
┬а ┬а ┬а },
┬а ┬а ],
┬а });
});


// тЬЕ 9я╕ПтГг Start Server
const PORT = process.env.PORT || 10000;
app.listen(PORT, () => console.log(`ЁЯЪА Server running on port ${PORT}`));
