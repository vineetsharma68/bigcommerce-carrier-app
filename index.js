require("dotenv").config();
const express = require("express");
const bodyParser = require("body-parser");
const axios = require("axios");

const app = express();
app.use(bodyParser.json());

// --- CONSTANTS ---
const API_BASE_URL = "https://api.bigcommerce.com/stores";
const MY_CARRIER_ID = "myrover_carrier"; // рдЖрдкрдХреЗ рдореЗрдЯрд╛рдбреЗрдЯрд╛ рдХреЗ рд╕рд╛рде рдореЗрд▓ рдЦрд╛рдирд╛ рдЪрд╛рд╣рд┐рдП
const MY_RATE_URL = `${process.env.APP_URL}/api/rates`; 
const MY_DISPLAY_NAME = "MyRover Shipping";


// ----------------------------------------------------------------------
// CARRIER MANAGEMENT HELPER FUNCTION
// ----------------------------------------------------------------------

/**
 * Checks for and registers/updates the Carrier Object in BigCommerce.
 */
async function manageBcCarrierConnection(storeHash, accessToken) {
    
    // Placeholder function: API calls require these headers
    const headers = {
        "Content-Type": "application/json",
        "Accept": "application/json",
        "X-Auth-Token": accessToken, 
    };
    
    const apiEndpoint = `${API_BASE_URL}/${storeHash}/v2/shipping/carrier/connections`;

    // 1. GET: рдореМрдЬреВрджрд╛ рдХрдиреЗрдХреНрд╢рдиреЛрдВ рдХреА рдЬрд╛рдБрдЪ рдХрд░реЗрдВ
    try {
        const checkResponse = await axios.get(apiEndpoint, { headers });
        const existingConnections = checkResponse.data;

        let existingBcId = null;
        for (const carrier of existingConnections) {
            if (carrier.carrier_id === MY_CARRIER_ID) {
                existingBcId = carrier.id;
                break;
            }
        }

        const carrierPayload = {
            carrier_id: MY_CARRIER_ID,
            display_name: MY_DISPLAY_NAME,
            type: "rate_calculator",
            rate_url: MY_RATE_URL, 
            // validation_url: `${process.env.APP_URL}/api/validate`, // рдЕрдЧрд░ рдЖрдк Validation Endpoint рдЬреЛрдбрд╝рддреЗ рд╣реИрдВ
        };

        if (existingBcId) {
            // 2. PUT: рдЕрдЧрд░ рдХрдиреЗрдХреНрд╢рди рдорд┐рд▓ рдЧрдпрд╛, рддреЛ рдЕрдкрдбреЗрдЯ рдХрд░реЗрдВ
            await axios.put(`${apiEndpoint}/${existingBcId}`, carrierPayload, { headers });
            console.log(`тЬЕ Carrier ID ${existingBcId} updated (PUT).`);
            
        } else {
            // 3. POST: рдЕрдЧрд░ рдХрдиреЗрдХреНрд╢рди рдирд╣реАрдВ рдорд┐рд▓рд╛, рддреЛ рдирдпрд╛ рдмрдирд╛рдПрдБ
            const createResponse = await axios.post(apiEndpoint, carrierPayload, { headers });
            console.log(`тЬЕ New Carrier connection created (POST): ID ${createResponse.data.id}`);
        }
    } catch (error) {
        // рдпрд╣рд╛рдБ error рдХреЛ throw рдХрд░рдирд╛ рдорд╣рддреНрд╡рдкреВрд░реНрдг рд╣реИ рддрд╛рдХрд┐ App installation fail рд╣реЛ рдЬрд╛рдП рдпрджрд┐ Carrier setup fail рд╣реЛрддрд╛ рд╣реИ
        console.error("тЭМ Carrier Connection Management Failed:", error.response?.data || error.message);
        throw new Error("BigCommerce Carrier setup failed during installation.");
    }
}

/**
 * Placeholder for saving credentials to your database (DB).
 * NOTE: You MUST implement this function to store tokens securely.
 */
async function saveStoreCredentialsToDB(storeHash, accessToken) {
    // Implement your database logic here (e.g., using Mongoose/Sequelize)
    console.log(`ЁЯФТ Credentials saved for store: ${storeHash}`);
    // Example: await db.collection('stores').updateOne({ hash: storeHash }, { $set: { token: accessToken } }, { upsert: true });
}

// ----------------------------------------------------------------------
// EXPRESS ROUTES
// ----------------------------------------------------------------------

// тЬЕ 1я╕ПтГг Home route
app.get("/", (req, res) => {
┬а res.send("ЁЯЪА MyRover Carrier App is running successfully!");
});


// тЬЕ 2я╕ПтГг OAuth Step 1 - BigCommerce authorization
app.get("/api/auth", async (req, res) => {
┬а console.log("тЬЕ OAuth Step 1 triggered", req.query);

┬а const { context } = req.query;
┬а if (!context) return res.status(400).send("тЭМ Missing store context");

┬а const redirectUri = `${process.env.APP_URL}/api/auth/callback`;

┬а // Redirect to BigCommerce OAuth login
┬а const installUrl = `https://login.bigcommerce.com/oauth2/authorize?client_id=${process.env.CLIENT_ID}&scope=${encodeURIComponent("store_v2_orders store_v2_information store_v2_shipping")}&redirect_uri=${encodeURIComponent(
┬а ┬а redirectUri
┬а )}&response_type=code&context=${context}`;

┬а res.redirect(installUrl);
});


// тЬЕ 3я╕ПтГг OAuth Step 2 - Callback from BigCommerce (MODIFIED)
app.get("/api/auth/callback", async (req, res) => {
┬а console.log("тЬЕ OAuth Callback triggered:", req.query);

┬а const { code, scope, context } = req.query;
┬а if (!code) return res.status(400).send("тЭМ Missing OAuth code");

┬а try {
┬а ┬а const tokenResponse = await axios.post("https://login.bigcommerce.com/oauth2/token", {
┬а ┬а ┬а client_id: process.env.CLIENT_ID,
┬а ┬а ┬а client_secret: process.env.CLIENT_SECRET,
┬а ┬а ┬а redirect_uri: `${process.env.APP_URL}/api/auth/callback`,
┬а ┬а ┬а grant_type: "authorization_code",
┬а ┬а ┬а code,
┬а ┬а ┬а scope,
┬а ┬а ┬а context,
┬а ┬а });

    // --- NEW LOGIC: Extract Tokens and Manage Carrier ---
    const { access_token } = tokenResponse.data;
    // context format: "stores/xxxxxx"
    const storeHash = context.split('/')[1]; 

    // A. рдХреНрд░реЗрдбреЗрдВрд╢рд┐рдпрд▓реНрд╕ рд╕рд╣реЗрдЬреЗрдВ (рдлреНрдпреВрдЪрд░ API рдХреЙрд▓реНрд╕ рдХреЗ рд▓рд┐рдП)
    await saveStoreCredentialsToDB(storeHash, access_token); 

    // B. Carrier Connection рдХреА рдЬрд╛рдБрдЪ рдХрд░реЗрдВ рдФрд░ рдмрдирд╛рдПрдБ/рдЕрдкрдбреЗрдЯ рдХрд░реЗрдВ
    await manageBcCarrierConnection(storeHash, access_token);

    // C. рд╕рдлрд▓рддрд╛ рдкрд░ App UI рдпрд╛ рдбреИрд╢рдмреЛрд░реНрдб рдкрд░ рд░реАрдбрд╛рдпрд░реЗрдХреНрдЯ рдХрд░реЗрдВ
┬а ┬а console.log("тЬЕ App installed and Carrier configured successfully!");
┬а ┬а 
    // рдорд░реНрдЪреЗрдВрдЯ рдХреЛ рдЕрдкрдиреЗ App рдХреЗ UI рдореЗрдВ рд░реАрдбрд╛рдпрд░реЗрдХреНрдЯ рдХрд░реЗрдВ (рдЙрджрд╛рд╣рд░рдг рдХреЗ рд▓рд┐рдП /dashboard)
    res.redirect(`${process.env.APP_URL}/dashboard?store_hash=${storeHash}`); 
    // рдпрджрд┐ рдЖрдкрдХреЗ рдкрд╛рд╕ UI рдирд╣реАрдВ рд╣реИ, рддреЛ рдЖрдк рдмрд╕ res.send("Success") рдХрд░ рд╕рдХрддреЗ рд╣реИрдВ
    // res.send("тЬЕ App installed successfully! You can close this window now.");

┬а } catch (err) {
┬а ┬а console.error("тЭМ App Installation/OAuth/Carrier Setup Error:", err.response?.data || err.message);
┬а ┬а res.status(500).send("App Installation failed. Check server logs.");
┬а }
});


// тЬЕ 4я╕ПтГг Uninstall callback
app.post("/api/uninstall", (req, res) => {
┬а console.log("тЭМ App Uninstalled:", req.body);
    // TODO: рдпрд╣рд╛рдВ рдбреЗрдЯрд╛рдмреЗрд╕ рд╕реЗ рд╕реНрдЯреЛрд░ рдХреНрд░реЗрдбреЗрдВрд╢рд┐рдпрд▓реНрд╕ рд╣рдЯрд╛рдПрдБ!
┬а res.send("тЬЕ Uninstall cleanup done.");
});


// тЬЕ 5я╕ПтГг Fetch available MyRover services
app.get("/api/myrover/services", async (req, res) => {
┬а try {
┬а ┬а const response = await axios.post("https://apis.myrover.io/GetServices", {}, {
┬а ┬а ┬а headers: {
┬а ┬а ┬а ┬а Authorization: process.env.MYROVER_API_KEY,
┬а ┬а ┬а ┬а "Content-Type": "application/json",
┬а ┬а ┬а },
┬а ┬а });

┬а ┬а console.log("ЁЯУж MyRover Services:", response.data);
┬а ┬а res.json({
┬а ┬а ┬а success: true,
┬а ┬а ┬а message: "Fetched available services from MyRover",
┬а ┬а ┬а data: response.data,
┬а ┬а });
┬а } catch (err) {
┬а ┬а console.error("тЭМ Error fetching MyRover services:", err.response?.data || err.message);
┬а ┬а res.status(500).json({
┬а ┬а ┬а success: false,
┬а ┬а ┬а error: err.response?.data || err.message,
┬а ┬а });
┬а }
});


// тЬЕ 6я╕ПтГг Shipping Rates endpoint (BigCommerce calls this URL)
app.post("/api/rates", async (req, res) => {
┬а const { origin, destination, items } = req.body;
┬а console.log("ЁЯУж Rate request received:", { origin, destination, items });

    // NOTE: рдЖрдкрдХреЛ рдпрд╣рд╛рдВ BigCommerce рд╕реЗ storeHash рдкреНрд░рд╛рдкреНрдд рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдПрдХ рддрд░реАрдХрд╛ рд▓рд╛рдЧреВ рдХрд░рдирд╛ рд╣реЛрдЧрд╛
    // рддрд╛рдХрд┐ рдЖрдк рдЙрд╕ рд╕реНрдЯреЛрд░ рдХреЗ рд▓рд┐рдП database рд╕реЗ access_token рд▓рд╛ рд╕рдХреЗрдВред
    // рд╕реБрд░рдХреНрд╖рд╛ рдХрд╛рд░рдгреЛрдВ рд╕реЗ, BigCommerce rates call рдореЗрдВ storeHash рдирд╣реАрдВ рднреЗрдЬрддрд╛ рд╣реИред
    
┬а try {
┬а ┬а // Fetch MyRover services dynamically (to get service IDs)
┬а ┬а const serviceRes = await axios.post("https://apis.myrover.io/GetServices", {}, {
┬а ┬а ┬а headers: {
┬а ┬а ┬а ┬а Authorization: process.env.MYROVER_API_KEY,
┬а ┬а ┬а ┬а "Content-Type": "application/json",
┬а ┬а ┬а },
┬а ┬а });

┬а ┬а const services = serviceRes.data?.services || [];
┬а ┬а console.log(`тЬЕ Found ${services.length} MyRover services`);

┬а ┬а // Test only first available service for demo (you can extend this)
┬а ┬а const service = services[0];
┬а ┬а console.log("ЁЯзй Using service:", service);

┬а ┬а // Fake pickup/drop addresses for test тАФ later map them dynamically
┬а ┬а const pickupAddress = "100 Dundas St W, Toronto, ON";
┬а ┬а const dropAddress = "200 King St W, Toronto, ON";

┬а ┬а // MyRover GetPrice API call
┬а ┬а const priceRes = await axios.post(
┬а ┬а ┬а "https://apis.myrover.io/GetPrice",
┬а ┬а ┬а {
┬а ┬а ┬а ┬а service_id: service.id,
┬а ┬а ┬а ┬а priority_id: 1,
┬а ┬а ┬а ┬а pickup_address: pickupAddress,
┬а ┬а ┬а ┬а drop_address: dropAddress,
┬а ┬а ┬а },
┬а ┬а ┬а {
┬а ┬а ┬а ┬а headers: {
┬а ┬а ┬а ┬а ┬а Authorization: process.env.MYROVER_API_KEY,
┬а ┬а ┬а ┬а ┬а "Content-Type": "application/json",
┬а ┬а ┬а ┬а },
┬а ┬а ┬а }
┬а ┬а );

┬а ┬а console.log("ЁЯТ░ MyRover Price Response:", priceRes.data);

┬а ┬а const cost = priceRes.data?.data?.cost || 15.0;

┬а ┬а const rates = [
┬а ┬а ┬а {
┬а ┬а ┬а ┬а carrier_quote: {
┬а ┬а ┬а ┬а ┬а code: service.abbreviation || "myrover",
┬а ┬а ┬а ┬а ┬а display_name: service.name || "MyRover Shipping",
┬а ┬а ┬а ┬а ┬а cost: cost,
┬а ┬а ┬а ┬а },
┬а ┬а ┬а },
┬а ┬а ];

    // BigCommerce рдХреЛ rates рд▓реМрдЯрд╛рдПрдБ
┬а ┬а res.json({ data: rates });
┬а } catch (err) {
┬а ┬а console.error("тЭМ MyRover API error:", err.response?.data || err.message);

┬а ┬а // fallback dummy rates
┬а ┬а res.json({
┬а ┬а ┬а data: [
┬а ┬а ┬а ┬а { carrier_quote: { code: "standard", display_name: "Standard Shipping", cost: 10.5 } },
┬а ┬а ┬а ┬а { carrier_quote: { code: "express", display_name: "Express Shipping", cost: 25.0 } },
┬а ┬а ┬а ],
┬а ┬а });
┬а }
});

// Test MyRover API key
app.get("/api/test-myrover", async (req, res) => {
┬а try {
┬а ┬а const response = await axios.post(
┬а ┬а ┬а "https://apis.myrover.io/GetServices",
┬а ┬а ┬а {},
┬а ┬а ┬а {
┬а ┬а ┬а ┬а headers: {
┬а ┬а ┬а ┬а ┬а Authorization: process.env.MYROVER_API_KEY,
┬а ┬а ┬а ┬а ┬а "Content-Type": "application/json"
┬а ┬а ┬а ┬а }
┬а ┬а ┬а }
┬а ┬а );

┬а ┬а res.json({ success: true, data: response.data });
┬а } catch (err) {
┬а ┬а console.error("тЭМ MyRover.io GetServices error:", err.response?.data || err.message);
┬а ┬а res.status(401).json({ success: false, error: err.response?.data || err.message });
┬а }
});


// Load Callback (рдХреЗрд╡рд▓ App iframe рд▓реЛрдб рд╣реЛрдиреЗ рдкрд░)
app.get("/api/load", (req, res) => {
┬а console.log("тЬЕ /api/load HIT");
    // рдпрд╣рд╛рдВ рдЖрдкрдХрд╛ App UI/Settings рдкреЗрдЬ рд░реЗрдВрдбрд░ рд╣реЛрдирд╛ рдЪрд╛рд╣рд┐рдП, JSON рдирд╣реАрдВред
    // рдпрд╣ endpoint рд╕реАрдзреЗ BigCommerce App iframe рдореЗрдВ рд▓реЛрдб рд╣реЛрддрд╛ рд╣реИред
    res.send("<h1>Welcome to MyRover Settings</h1><p>Carrier configured successfully!</p>");
});


// тЬЕ 7я╕ПтГг Account verification (used by BigCommerce to check status)
app.post("/api/check-v2", (req, res) => {
┬а console.log("тЬЕ /api/check-v2 HIT");
┬а return res.status(200).json({ status: "active" });
});


// ЁЯЪЪ BigCommerce Test Connection Endpoint
app.post("/v1/shipping/connection", (req, res) => {
  console.log("тЬЕ /v1/shipping/connection HIT from BigCommerce");
  return res.status(200).json({
    status: "OK",
    message: "MyRover connection verified successfully"
  });
});

// ЁЯУж Get Shipping Rates Endpoint
app.post("/v1/shipping/rates", async (req, res) => {
  console.log("ЁЯУж /v1/shipping/rates HIT from BigCommerce");
  try {
    const rateResponse = {
      data: [
        {
          carrier_id: 530,
          carrier_code: "myrover",
          carrier_name: "MyRover Express",
          rate_id: "MYROVER_STANDARD",
          rate_name: "MyRover Delivery (1тАУ2 Days)",
          cost: 9.99,
          currency: "CAD",
          transit_time: "1тАУ2 business days",
          description: "Fast local delivery via MyRover"
        }
      ]
    };
    res.status(200).json(rateResponse);
  } catch (err) {
    console.error("тЭМ Error in /rates:", err);
    res.status(500).json({ error: "Failed to fetch rates" });
  }
});

// ЁЯз╛ Register Metadata
async function registerMetadata(storeHash, token) {
  const url = `https://api.bigcommerce.com/stores/${storeHash}/v3/app/metadata`;
  const metadata = [
    { key: "shipping_connection", value: "/v1/shipping/connection" },
    { key: "shipping_rates", value: "/v1/shipping/rates" }
  ];

  const response = await fetch(url, {
    method: "POST",
    headers: {
      "X-Auth-Token": token,
      "Content-Type": "application/json",
      "Accept": "application/json"
    },
    body: JSON.stringify(metadata)
  });

  const data = await response.json().catch(() => null);
  if (!response.ok) {
    console.error("тЭМ Metadata registration failed:", data);
    return data;
  }

  console.log("тЬЕ Metadata registered:", data);
  return data;
}

// ЁЯзй Debug Route тАФ Test Stored Token
app.get("/debug/test", (req, res) => {
  const storeHash = req.query.store;
  const token = storeTokens.get(storeHash);
  if (!token) return res.json({ error: "No token or store hash loaded in memory" });
  res.json({ success: true, store: storeHash, token });
});

// ЁЯзй Debug Route тАФ Force Register Metadata


app.get("/v1/metadata", async (req, res) => {
  console.log("ЁЯУж /v1/metadata HIT from BigCommerce");

  try {
    const metadata = {
      meta: {
        version: "1.0",
        documentation: "https://myrover.io/docs/carrier-api",
      },
      data: {
        carrier_name: "MyRover Express",
        carrier_code: "myrover",
        description: "MyRover Carrier Integration for BigCommerce",
        supported_methods: [
          {
            type: "connection_test",
            endpoint: "/v1/shipping/connection",
            method: "POST",
          },
          {
            type: "get_rates",
            endpoint: "/v1/shipping/rates",
            method: "POST",
          }
        ],
      },
    };

    return res.status(200).json({ success: true, result: metadata });
  } catch (err) {
    console.error("тЭМ Metadata Error:", err);
    return res.status(500).json({
      success: false,
      message: "Metadata generation failed",
      error: err.message,
    });
  }
});

// тЬЕ 9я╕ПтГг Start Server
const PORT = process.env.PORT || 10000;
app.listen(PORT, () => console.log(`ЁЯЪА Server running on port ${PORT}`));
