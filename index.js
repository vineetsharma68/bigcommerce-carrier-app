require("dotenv").config();
const express = require("express");
const bodyParser = require("body-parser");
const axios = require("axios");
const crypto = require('crypto'); // üîë ‡§ï‡•ç‡§∞‡§ø‡§™‡•ç‡§ü‡•ã ‡§ï‡•ã ‡§´‡§º‡§æ‡§á‡§≤ ‡§ï‡•á ‡§∂‡•Ä‡§∞‡•ç‡§∑ ‡§™‡§∞ ‡§≤‡•á ‡§ú‡§æ‡§Ø‡§æ ‡§ó‡§Ø‡§æ

const app = express();
app.use(bodyParser.json());

// --- CONSTANTS ---
const API_BASE_URL = "https://api.bigcommerce.com/stores";
const MY_CARRIER_ID = "myrover_carrier";
const MY_DISPLAY_NAME = "MyRover Shipping";
// ----------------------------------------------------------------------

// ----------------------------------------------------------------------
// ‚úÖ 1. HELPER FUNCTIONS (Routes ‡§∏‡•á ‡§™‡§π‡§≤‡•á ‡§™‡§∞‡§ø‡§≠‡§æ‡§∑‡§ø‡§§)
// ----------------------------------------------------------------------

/**
 * BigCommerce signed_payload ‡§ï‡•ã ‡§µ‡•á‡§∞‡§ø‡§´‡§æ‡§à ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è
 */
function verifySignedRequest(signedPayload, clientSecret) {
    if (!signedPayload || !clientSecret) return false;

    const parts = signedPayload.split('.');
    if (parts.length !== 2) return false;

    const signaturePart = parts[0];
    const dataPart = parts[1];
    const trimmedSecret = clientSecret.trim(); // Trim the secret

    // 1. ‡§π‡§∏‡•ç‡§§‡§æ‡§ï‡•ç‡§∑‡§∞ (Signature) ‡§ï‡•ã Hex ‡§Æ‡•á‡§Ç ‡§¨‡§¶‡§≤‡•á‡§Ç
    // URL-Safe Base64 ‡§ï‡•ã ‡§Æ‡§æ‡§®‡§ï Base64 ‡§Æ‡•á‡§Ç ‡§¨‡§¶‡§≤‡•á‡§Ç
    const base64UrlSafeSignature = signaturePart.replace(/-/g, '+').replace(/_/g, '/');
    const incomingSignature = Buffer.from(base64UrlSafeSignature, 'base64').toString('hex');
    
    // 2. ‡§Ö‡§™‡•á‡§ï‡•ç‡§∑‡§ø‡§§ ‡§π‡§∏‡•ç‡§§‡§æ‡§ï‡•ç‡§∑‡§∞ (Expected Signature) ‡§ï‡•Ä ‡§ó‡§£‡§®‡§æ ‡§ï‡§∞‡•á‡§Ç
    const expectedSignature = crypto
        .createHmac('sha256', trimmedSecret)
        .update(dataPart) // ‡§Ö‡§∏‡§Ç‡§∂‡•ã‡§ß‡§ø‡§§ ‡§°‡•á‡§ü‡§æ ‡§≠‡§æ‡§ó ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç
        .digest('hex');
    
    // DEBUG logs
    console.log(`DEBUG: Actual Signature (Hmac): ${expectedSignature}`);
    console.log(`DEBUG: Incoming Signature: ${incomingSignature}`);

    return expectedSignature === incomingSignature;
}

/**
 * Checks for and registers/updates the Carrier Object in BigCommerce.
 */
async function manageBcCarrierConnection(storeHash, accessToken) {
    const MY_RATE_URL = `${process.env.APP_URL}/api/rates`; 
    const headers = {
        "Content-Type": "application/json",
        "Accept": "application/json",
        "X-Auth-Token": accessToken, 
    };
    const apiEndpoint = `${API_BASE_URL}/${storeHash}/v2/shipping/carrier/connections`;

    // ... (manageBcCarrierConnection ‡§ï‡§æ ‡§¨‡§æ‡§ï‡•Ä ‡§ï‡§æ ‡§≤‡•â‡§ú‡§ø‡§ï ‡§Ö‡§™‡§∞‡§ø‡§µ‡§∞‡•ç‡§§‡§ø‡§§ ‡§π‡•à)
    try {
        const checkResponse = await axios.get(apiEndpoint, { headers });
        const existingConnections = checkResponse.data;

        let existingBcId = null;
        for (const carrier of existingConnections) {
            if (carrier.carrier_id === MY_CARRIER_ID) {
                existingBcId = carrier.id;
                break;
            }
        }

        const carrierPayload = {
            carrier_id: MY_CARRIER_ID,
            display_name: MY_DISPLAY_NAME,
            type: "rate_calculator",
            rate_url: MY_RATE_URL, 
        };

        if (existingBcId) {
            await axios.put(`${apiEndpoint}/${existingBcId}`, carrierPayload, { headers });
            console.log(`‚úÖ Carrier ID ${existingBcId} updated (PUT).`);
            
        } else {
            const createResponse = await axios.post(apiEndpoint, carrierPayload, { headers });
            console.log(`‚úÖ New Carrier connection created (POST): ID ${createResponse.data.id}`);
        }
    } catch (error) {
        console.error("‚ùå Carrier Connection Management Failed:", error.response?.data || error.message);
        throw new Error("BigCommerce Carrier setup failed during installation.");
    }
}

async function saveStoreCredentialsToDB(storeHash, accessToken) {
    console.log(`üîí Credentials saved for store: ${storeHash}`);
    // NOTE: ‡§Ü‡§™‡§ï‡•ã ‡§Ø‡§π‡§æ‡§Ç ‡§°‡•á‡§ü‡§æ‡§¨‡•á‡§∏ ‡§≤‡•â‡§ú‡§ø‡§ï ‡§≤‡§æ‡§ó‡•Ç ‡§ï‡§∞‡§®‡§æ ‡§π‡•ã‡§ó‡§æ
}

// ----------------------------------------------------------------------
// ‚úÖ 2. EXPRESS ROUTES
// ----------------------------------------------------------------------

// 1Ô∏è‚É£ Home route
app.get("/", (req, res) => {
    res.send("üöÄ MyRover Carrier App is running successfully!");
});

// 2Ô∏è‚É£ OAuth Step 1 - BigCommerce authorization (Launch App ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§®‡§π‡•Ä‡§Ç)
app.get("/api/auth", async (req, res) => {
    // ... (‡§Ü‡§™‡§ï‡§æ AUTH ‡§≤‡•â‡§ú‡§ø‡§ï ‡§Ö‡§™‡§∞‡§ø‡§µ‡§∞‡•ç‡§§‡§ø‡§§ ‡§π‡•à)
    console.log("‚úÖ OAuth Step 1 triggered", req.query);
    const { context } = req.query;
    if (!context) return res.status(400).send("‚ùå Missing store context");
    const redirectUri = `${process.env.APP_URL}/api/auth/callback`;
    const installUrl = `https://login.bigcommerce.com/oauth2/authorize?client_id=${process.env.CLIENT_ID}&scope=${encodeURIComponent("store_v2_orders store_v2_information store_v2_shipping")}&redirect_uri=${encodeURIComponent(redirectUri)}&response_type=code&context=${context}`;
    res.redirect(installUrl);
});

// 3Ô∏è‚É£ OAuth Step 2 - Callback from BigCommerce
app.get("/api/auth/callback", async (req, res) => {
    console.log("‚úÖ OAuth Callback triggered:", req.query);
    const { code, scope, context } = req.query;
    if (!code) return res.status(400).send("‚ùå Missing OAuth code");
    try {
        const tokenResponse = await axios.post("https://login.bigcommerce.com/oauth2/token", {
            client_id: process.env.CLIENT_ID,
            client_secret: process.env.CLIENT_SECRET,
            redirect_uri: `${process.env.APP_URL}/api/auth/callback`,
            grant_type: "authorization_code",
            code,
            scope,
            context,
        });

        const { access_token, user: { id: userId }, context: storeHash } = tokenResponse.data;

        // üîë Carrier Management ‡§ï‡•ã ‡§Ø‡§π‡§æ‡§Ç ‡§ï‡•â‡§≤ ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ‡§§‡§æ ‡§π‡•à
        await manageBcCarrierConnection(storeHash.replace('stores/', ''), access_token);
        await saveStoreCredentialsToDB(storeHash.replace('stores/', ''), access_token);

        console.log("‚úÖ OAuth Token Received and Carrier Setup Complete.");
        res.send("‚úÖ App installed successfully! You can close this window now.");

    } catch (err) {
        console.error("‚ùå OAuth Error/Carrier Setup Fail:", err.response?.data || err.message);
        res.status(500).send("App installation or setup failed.");
    }
});

// üîë 4Ô∏è‚É£ Load Callback (Launch App ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï, ‡§Ö‡§¨ ‡§∏‡§π‡•Ä ‡§∏‡§Ç‡§∞‡§ö‡§®‡§æ ‡§Æ‡•á‡§Ç)
app.get("/api/load", (req, res) => {
    console.log("‚úÖ /api/load HIT");

    const signedPayload = req.query.signed_payload; // üîë ‡§Ø‡§π line ‡§Ö‡§¨ ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§ø‡§§ ‡§π‡•à
    const clientSecret = process.env.CLIENT_SECRET;

    if (!signedPayload || !clientSecret) {
        return res.status(400).send("Bad Request: Missing signed data or secret.");
    }
    
    if (!verifySignedRequest(signedPayload, clientSecret)) {
        console.error("‚ùå Load Error: Invalid signed_payload signature!");
        return res.status(401).send("Unauthorized: Invalid request signature.");
    }

    console.log("‚úÖ Load Verification Successful. Sending success HTML.");

    // Load ‡§π‡•ã‡§®‡•á ‡§™‡§∞ iFrame ‡§Æ‡•á‡§Ç ‡§¶‡§ø‡§ñ‡§®‡•á ‡§µ‡§æ‡§≤‡§æ HTML
    res.status(200).send(`
      <!DOCTYPE html>
      <html lang="en">
      <head>
          <meta charset="UTF-8">
          <title>MyRover Configuration</title>
          <style>body { font-family: Arial, sans-serif; padding: 20px; background-color: #f0f2f5; }</style>
      </head>
      <body>
          <h1>üöÄ MyRover Carrier App</h1>
          <p>Configuration panel loaded successfully inside BigCommerce. You can now configure your shipping settings.</p>
          <p>This is where your app's main settings UI would appear.</p>
      </body>
      </html>
    `);
});

// 5Ô∏è‚É£ Uninstall callback
app.post("/api/uninstall", (req, res) => {
    console.log("‚ùå App Uninstalled:", req.body);
    res.send("‚úÖ Uninstall cleanup done.");
});

// 6Ô∏è‚É£ Shipping Rates endpoint
app.post("/api/rates", async (req, res) => {
    // ... (‡§Ü‡§™‡§ï‡§æ RATES ‡§≤‡•â‡§ú‡§ø‡§ï ‡§Ö‡§™‡§∞‡§ø‡§µ‡§∞‡•ç‡§§‡§ø‡§§ ‡§π‡•à)
    const { origin, destination, items } = req.body;
    console.log("üì¶ Rate request received:", { origin, destination, items });
    try {
        const serviceRes = await axios.post("https://apis.myrover.io/GetServices", {}, {
            headers: { Authorization: process.env.MYROVER_API_KEY, "Content-Type": "application/json" },
        });
        const services = serviceRes.data?.services || [];
        const service = services[0];
        const cost = 15.0; // Simplified cost logic
        const rates = [
            { carrier_quote: { code: service.abbreviation || "myrover", display_name: service.name || "MyRover Shipping", cost: cost } },
        ];
        res.json({ data: rates });
    } catch (err) {
        console.error("‚ùå MyRover API error:", err.response?.data || err.message);
        res.json({ data: [{ carrier_quote: { code: "standard", display_name: "Standard Shipping", cost: 10.5 } }] });
    }
});

// 7Ô∏è‚É£ Account verification (used by BigCommerce to check status)
app.post("/api/check", (req, res) => {
    console.log("‚úÖ /api/check HIT: Account Status Check");
    res.setHeader('Cache-Control', 'no-cache, no-store, must-revalidate'); 
    return res.status(200).json({ status: "active" });
});

// 8Ô∏è‚É£ Metadata endpoint
app.get("/api/metadata", (req, res) => {
    console.log("‚úÖ /api/metadata HIT: Sending Carrier Metadata");
    const base_url = process.env.APP_URL; 

    res.status(200).json({
        carriers: [{
            carrier_id: "myrover",
            label: "MyRover Shipping",
            countries: ["CA"], 
            settings_url: `${base_url}/api/check`, // BC ‡§∏‡•ç‡§ü‡•á‡§ü‡§∏ ‡§Ø‡§π‡§æ‡§Å ‡§∏‡•á ‡§ö‡•á‡§ï ‡§ï‡§∞‡§§‡§æ ‡§π‡•à
            rates_url: `${base_url}/api/rates`, 
        }],
    });
});

// 9Ô∏è‚É£ Start Server
const PORT = process.env.PORT || 10000;
app.listen(PORT, () => console.log(`üöÄ Server running on port ${PORT}`));
